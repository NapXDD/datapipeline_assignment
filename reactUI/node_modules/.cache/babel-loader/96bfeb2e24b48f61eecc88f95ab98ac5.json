{"ast":null,"code":"var _jsxFileName = \"/home/nap/crypto-streaming/reactUI/src/components/CoinChart.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Card, Button, IconButton } from '@material-ui/core';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Chart from 'chart.js';\nimport CoinCard from './CoinCard';\nconst useStyles = makeStyles(theme => ({\n  card: {\n    minWidth: 300,\n    maxWidth: 1000,\n    backgroundColor: theme.palette.secondary.main,\n    padding: '1rem',\n    boxShadow: '0rem 0rem 1rem black'\n  },\n  gridContainer: {\n    paddingTop: '20px'\n  }\n}));\n\nconst jitter = data => {\n  const numericData = parseFloat(data);\n  const jitterAmount = Math.random() * (1.01 - 0.99) + 0.99;\n  return numericData * jitterAmount;\n};\n\nconst CoinChart = props => {\n  const {\n    firstPrice,\n    firstTimestamp,\n    firstArithmeticMean,\n    firstGeometricMean,\n    firstHarmonicMean\n  } = props.location.state;\n  const {\n    symbol,\n    id\n  } = props.match.params;\n  const classes = useStyles();\n  const chartRef = useRef(null);\n  const [coinChart, setcoinChart] = useState({});\n  const [coinPrice, setCoinPrice] = useState({\n    price: 0,\n    priceChange: 0,\n    totalSupply: 0,\n    marketCap: 0,\n    totalVolume: 0,\n    timestamp: ''\n  });\n  const [coinAggregate, setCoinAggregate] = useState({\n    arithmeticMean: 0,\n    geometricMean: 0,\n    harmonicMean: 0\n  });\n  const [coinData, setCoinData] = useState(null);\n\n  const formatTime = timestamp => timestamp.slice(11, 19);\n\n  useEffect(() => {\n    const getCoin = async () => {\n      const data = await axios.get(`https://api.coinranking.com/v1/public/coin/${id}`);\n      setCoinData(data.data.data.coin);\n    };\n\n    getCoin();\n    const ctx = chartRef.current.getContext('2d');\n    const chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: [formatTime(firstTimestamp)],\n        datasets: [{\n          label: 'Price',\n          data: [jitter(firstPrice)],\n          borderColor: '#3e95cd',\n          fill: false\n        }, {\n          label: 'Arithmetic Mean',\n          data: [jitter(firstArithmeticMean)],\n          borderColor: '#8e5ea2',\n          fill: false\n        }, {\n          label: 'Geometric Mean',\n          data: [jitter(firstGeometricMean)],\n          borderColor: '#3cba9f',\n          fill: false\n        }, {\n          label: 'Harmonic Mean',\n          data: [jitter(firstHarmonicMean)],\n          borderColor: '#e8c3b9',\n          fill: false\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Real-Time Dashboard',\n          fontFamily: 'Raleway',\n          fontSize: 45,\n          fontStyle: 'normal',\n          fontColor: '#f2a365'\n        },\n        tooltips: {\n          titleFontFamily: 'Roboto',\n          bodyFontFamily: 'Roboto',\n          displayColors: true\n        },\n        legend: {\n          labels: {\n            fontColor: 'white',\n            fontFamily: 'Roboto',\n            fontSize: 14\n          }\n        },\n        layout: {\n          padding: {\n            left: 25,\n            right: 25,\n            top: 0,\n            bottom: 25\n          }\n        },\n        scales: {\n          yAxes: [{\n            gridLines: {\n              display: true,\n              color: '#30475e'\n            },\n            ticks: {\n              fontColor: '#f2a365',\n              fontFamily: 'Roboto',\n              fontSize: 12\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              display: true,\n              color: '#30475e'\n            },\n            ticks: {\n              fontColor: '#f2a365',\n              fontFamily: 'Roboto',\n              fontSize: 12\n            }\n          }]\n        }\n      }\n    });\n    setcoinChart(chart);\n  }, [firstPrice, firstArithmeticMean, firstGeometricMean, firstHarmonicMean, firstTimestamp, id]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const getPrice = async () => {\n        const {\n          data\n        } = await axios.get(`http://localhost:5000/latestPrice/${symbol}`);\n        setCoinPrice({\n          price: data.price,\n          priceChange: data.percent_change_24hr,\n          totalSupply: data.total_supply,\n          marketCap: data.market_cap,\n          totalVolume: data.volume,\n          timestamp: data.timestamp\n        });\n      };\n\n      const getAggregate = async () => {\n        const {\n          data\n        } = await axios.get(`http://localhost:5000/latestAggregate/${symbol}`);\n        setCoinAggregate({\n          arithmeticMean: data.arithmetic_mean,\n          geometricMean: data.geometric_mean,\n          harmonicMean: data.harmonic_mean\n        });\n      };\n\n      getAggregate();\n      getPrice();\n\n      if (coinPrice.price !== 0) {\n        coinChart.data.labels.push(formatTime(coinPrice.timestamp));\n        coinChart.data.datasets[0].data.push(jitter(coinPrice.price));\n        coinChart.data.datasets[1].data.push(jitter(coinAggregate.arithmeticMean));\n        coinChart.data.datasets[2].data.push(jitter(coinAggregate.geometricMean));\n        coinChart.data.datasets[3].data.push(jitter(coinAggregate.harmonicMean));\n        coinChart.update();\n      }\n    }, 10000);\n    return () => clearInterval(interval);\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: 10,\n    spacing: 4,\n    className: classes.gridContainer,\n    justify: \"center\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"coinChart\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      margin: '5px'\n    },\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: () => {\n      const prices = coinChart.data.datasets[0];\n      prices.hidden = !prices.hidden;\n      coinChart.update();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, \"Toggle Price\"), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      margin: '5px'\n    },\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: () => {\n      const amDS = coinChart.data.datasets[1];\n      amDS.hidden = !amDS.hidden;\n      const gmDS = coinChart.data.datasets[2];\n      gmDS.hidden = !gmDS.hidden;\n      const hmDS = coinChart.data.datasets[3];\n      hmDS.hidden = !hmDS.hidden;\n      coinChart.update();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, \"Toggle Aggregates\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"home\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AppsIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }\n  }))))), coinData && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CoinCard, {\n    coinData: coinData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CoinChart;","map":{"version":3,"sources":["/home/nap/crypto-streaming/reactUI/src/components/CoinChart.js"],"names":["React","useEffect","useState","useRef","makeStyles","Grid","Card","Button","IconButton","AppsIcon","axios","Link","Chart","CoinCard","useStyles","theme","card","minWidth","maxWidth","backgroundColor","palette","secondary","main","padding","boxShadow","gridContainer","paddingTop","jitter","data","numericData","parseFloat","jitterAmount","Math","random","CoinChart","props","firstPrice","firstTimestamp","firstArithmeticMean","firstGeometricMean","firstHarmonicMean","location","state","symbol","id","match","params","classes","chartRef","coinChart","setcoinChart","coinPrice","setCoinPrice","price","priceChange","totalSupply","marketCap","totalVolume","timestamp","coinAggregate","setCoinAggregate","arithmeticMean","geometricMean","harmonicMean","coinData","setCoinData","formatTime","slice","getCoin","get","coin","ctx","current","getContext","chart","type","labels","datasets","label","borderColor","fill","options","title","display","text","fontFamily","fontSize","fontStyle","fontColor","tooltips","titleFontFamily","bodyFontFamily","displayColors","legend","layout","left","right","top","bottom","scales","yAxes","gridLines","color","ticks","xAxes","interval","setInterval","getPrice","percent_change_24hr","total_supply","market_cap","volume","getAggregate","arithmetic_mean","geometric_mean","harmonic_mean","push","update","clearInterval","margin","prices","hidden","amDS","gmDS","hmDS"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,mBAA/C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,SAAS,GAAGV,UAAU,CAAEW,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,eAAe,EAAEJ,KAAK,CAACK,OAAN,CAAcC,SAAd,CAAwBC,IAHrC;AAIJC,IAAAA,OAAO,EAAE,MAJL;AAKJC,IAAAA,SAAS,EAAE;AALP,GADiC;AAQvCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,UAAU,EAAE;AADC;AARwB,CAAZ,CAAD,CAA5B;;AAaA,MAAMC,MAAM,GAAIC,IAAD,IAAU;AACvB,QAAMC,WAAW,GAAGC,UAAU,CAACF,IAAD,CAA9B;AACA,QAAMG,YAAY,GAAGC,IAAI,CAACC,MAAL,MAAiB,OAAO,IAAxB,IAAgC,IAArD;AAEA,SAAOJ,WAAW,GAAGE,YAArB;AACD,CALD;;AAOA,MAAMG,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM;AACJC,IAAAA,UADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,mBAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA;AALI,MAMFL,KAAK,CAACM,QAAN,CAAeC,KANnB;AAOA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAiBT,KAAK,CAACU,KAAN,CAAYC,MAAnC;AAEA,QAAMC,OAAO,GAAGjC,SAAS,EAAzB;AAEA,QAAMkC,QAAQ,GAAG7C,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAAC8C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiD,SAAD,EAAYC,YAAZ,IAA4BlD,QAAQ,CAAC;AACzCmD,IAAAA,KAAK,EAAE,CADkC;AAEzCC,IAAAA,WAAW,EAAE,CAF4B;AAGzCC,IAAAA,WAAW,EAAE,CAH4B;AAIzCC,IAAAA,SAAS,EAAE,CAJ8B;AAKzCC,IAAAA,WAAW,EAAE,CAL4B;AAMzCC,IAAAA,SAAS,EAAE;AAN8B,GAAD,CAA1C;AAQA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC1D,QAAQ,CAAC;AACjD2D,IAAAA,cAAc,EAAE,CADiC;AAEjDC,IAAAA,aAAa,EAAE,CAFkC;AAGjDC,IAAAA,YAAY,EAAE;AAHmC,GAAD,CAAlD;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B/D,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMgE,UAAU,GAAIR,SAAD,IAAeA,SAAS,CAACS,KAAV,CAAgB,EAAhB,EAAoB,EAApB,CAAlC;;AAEAlE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmE,OAAO,GAAG,YAAY;AAC1B,YAAMxC,IAAI,GAAG,MAAMlB,KAAK,CAAC2D,GAAN,CAChB,8CAA6CzB,EAAG,EADhC,CAAnB;AAIAqB,MAAAA,WAAW,CAACrC,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAe0C,IAAhB,CAAX;AACD,KAND;;AAQAF,IAAAA,OAAO;AAEP,UAAMG,GAAG,GAAGvB,QAAQ,CAACwB,OAAT,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AAEA,UAAMC,KAAK,GAAG,IAAI9D,KAAJ,CAAU2D,GAAV,EAAe;AAC3BI,MAAAA,IAAI,EAAE,MADqB;AAE3B/C,MAAAA,IAAI,EAAE;AACJgD,QAAAA,MAAM,EAAE,CAACV,UAAU,CAAC7B,cAAD,CAAX,CADJ;AAEJwC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAE,OADT;AAEElD,UAAAA,IAAI,EAAE,CAACD,MAAM,CAACS,UAAD,CAAP,CAFR;AAGE2C,UAAAA,WAAW,EAAE,SAHf;AAIEC,UAAAA,IAAI,EAAE;AAJR,SADQ,EAOR;AACEF,UAAAA,KAAK,EAAE,iBADT;AAEElD,UAAAA,IAAI,EAAE,CAACD,MAAM,CAACW,mBAAD,CAAP,CAFR;AAGEyC,UAAAA,WAAW,EAAE,SAHf;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAPQ,EAaR;AACEF,UAAAA,KAAK,EAAE,gBADT;AAEElD,UAAAA,IAAI,EAAE,CAACD,MAAM,CAACY,kBAAD,CAAP,CAFR;AAGEwC,UAAAA,WAAW,EAAE,SAHf;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAbQ,EAmBR;AACEF,UAAAA,KAAK,EAAE,eADT;AAEElD,UAAAA,IAAI,EAAE,CAACD,MAAM,CAACa,iBAAD,CAAP,CAFR;AAGEuC,UAAAA,WAAW,EAAE,SAHf;AAIEC,UAAAA,IAAI,EAAE;AAJR,SAnBQ;AAFN,OAFqB;AA+B3BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,IAAI,EAAE,qBAFD;AAGLC,UAAAA,UAAU,EAAE,SAHP;AAILC,UAAAA,QAAQ,EAAE,EAJL;AAKLC,UAAAA,SAAS,EAAE,QALN;AAMLC,UAAAA,SAAS,EAAE;AANN,SADA;AASPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,eAAe,EAAE,QADT;AAERC,UAAAA,cAAc,EAAE,QAFR;AAGRC,UAAAA,aAAa,EAAE;AAHP,SATH;AAcPC,QAAAA,MAAM,EAAE;AACNjB,UAAAA,MAAM,EAAE;AACNY,YAAAA,SAAS,EAAE,OADL;AAENH,YAAAA,UAAU,EAAE,QAFN;AAGNC,YAAAA,QAAQ,EAAE;AAHJ;AADF,SAdD;AAqBPQ,QAAAA,MAAM,EAAE;AACNvE,UAAAA,OAAO,EAAE;AACPwE,YAAAA,IAAI,EAAE,EADC;AAEPC,YAAAA,KAAK,EAAE,EAFA;AAGPC,YAAAA,GAAG,EAAE,CAHE;AAIPC,YAAAA,MAAM,EAAE;AAJD;AADH,SArBD;AA6BPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,SAAS,EAAE;AACTlB,cAAAA,OAAO,EAAE,IADA;AAETmB,cAAAA,KAAK,EAAE;AAFE,aADb;AAKEC,YAAAA,KAAK,EAAE;AACLf,cAAAA,SAAS,EAAE,SADN;AAELH,cAAAA,UAAU,EAAE,QAFP;AAGLC,cAAAA,QAAQ,EAAE;AAHL;AALT,WADK,CADD;AAcNkB,UAAAA,KAAK,EAAE,CACL;AACEH,YAAAA,SAAS,EAAE;AACTlB,cAAAA,OAAO,EAAE,IADA;AAETmB,cAAAA,KAAK,EAAE;AAFE,aADb;AAKEC,YAAAA,KAAK,EAAE;AACLf,cAAAA,SAAS,EAAE,SADN;AAELH,cAAAA,UAAU,EAAE,QAFP;AAGLC,cAAAA,QAAQ,EAAE;AAHL;AALT,WADK;AAdD;AA7BD;AA/BkB,KAAf,CAAd;AA2FApC,IAAAA,YAAY,CAACwB,KAAD,CAAZ;AACD,GAzGQ,EAyGN,CACDtC,UADC,EAEDE,mBAFC,EAGDC,kBAHC,EAIDC,iBAJC,EAKDH,cALC,EAMDO,EANC,CAzGM,CAAT;AAkHA3C,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwG,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMC,QAAQ,GAAG,YAAY;AAC3B,cAAM;AAAE/E,UAAAA;AAAF,YAAW,MAAMlB,KAAK,CAAC2D,GAAN,CACpB,qCAAoC1B,MAAO,EADvB,CAAvB;AAIAS,QAAAA,YAAY,CAAC;AACXC,UAAAA,KAAK,EAAEzB,IAAI,CAACyB,KADD;AAEXC,UAAAA,WAAW,EAAE1B,IAAI,CAACgF,mBAFP;AAGXrD,UAAAA,WAAW,EAAE3B,IAAI,CAACiF,YAHP;AAIXrD,UAAAA,SAAS,EAAE5B,IAAI,CAACkF,UAJL;AAKXrD,UAAAA,WAAW,EAAE7B,IAAI,CAACmF,MALP;AAMXrD,UAAAA,SAAS,EAAE9B,IAAI,CAAC8B;AANL,SAAD,CAAZ;AAQD,OAbD;;AAeA,YAAMsD,YAAY,GAAG,YAAY;AAC/B,cAAM;AAAEpF,UAAAA;AAAF,YAAW,MAAMlB,KAAK,CAAC2D,GAAN,CACpB,yCAAwC1B,MAAO,EAD3B,CAAvB;AAIAiB,QAAAA,gBAAgB,CAAC;AACfC,UAAAA,cAAc,EAAEjC,IAAI,CAACqF,eADN;AAEfnD,UAAAA,aAAa,EAAElC,IAAI,CAACsF,cAFL;AAGfnD,UAAAA,YAAY,EAAEnC,IAAI,CAACuF;AAHJ,SAAD,CAAhB;AAKD,OAVD;;AAYAH,MAAAA,YAAY;AACZL,MAAAA,QAAQ;;AAER,UAAIxD,SAAS,CAACE,KAAV,KAAoB,CAAxB,EAA2B;AACzBJ,QAAAA,SAAS,CAACrB,IAAV,CAAegD,MAAf,CAAsBwC,IAAtB,CAA2BlD,UAAU,CAACf,SAAS,CAACO,SAAX,CAArC;AACAT,QAAAA,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,EAA2BjD,IAA3B,CAAgCwF,IAAhC,CAAqCzF,MAAM,CAACwB,SAAS,CAACE,KAAX,CAA3C;AACAJ,QAAAA,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,EAA2BjD,IAA3B,CAAgCwF,IAAhC,CACEzF,MAAM,CAACgC,aAAa,CAACE,cAAf,CADR;AAGAZ,QAAAA,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,EAA2BjD,IAA3B,CAAgCwF,IAAhC,CACEzF,MAAM,CAACgC,aAAa,CAACG,aAAf,CADR;AAGAb,QAAAA,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,EAA2BjD,IAA3B,CAAgCwF,IAAhC,CACEzF,MAAM,CAACgC,aAAa,CAACI,YAAf,CADR;AAIAd,QAAAA,SAAS,CAACoE,MAAV;AACD;AACF,KA9C2B,EA8CzB,KA9CyB,CAA5B;AAgDA,WAAO,MAAMC,aAAa,CAACb,QAAD,CAA1B;AACD,GAlDQ,CAAT;AAoDA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,MAFN;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,EAAE,EAAE,EAJN;AAKE,IAAA,OAAO,EAAE,CALX;AAME,IAAA,SAAS,EAAE1D,OAAO,CAACtB,aANrB;AAOE,IAAA,OAAO,EAAC,QAPV;AAQE,IAAA,KAAK,EAAC,QARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEsB,OAAO,CAAC/B,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,EAAE,EAAC,WAAX;AAAuB,IAAA,GAAG,EAAEgC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEuE,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,OAAO,EAAE,MAAM;AACb,YAAMC,MAAM,GAAGvE,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,CAAf;AACA2C,MAAAA,MAAM,CAACC,MAAP,GAAgB,CAACD,MAAM,CAACC,MAAxB;AACAxE,MAAAA,SAAS,CAACoE,MAAV;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAcE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,OAAO,EAAE,MAAM;AACb,YAAMG,IAAI,GAAGzE,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,CAAb;AACA6C,MAAAA,IAAI,CAACD,MAAL,GAAc,CAACC,IAAI,CAACD,MAApB;AACA,YAAME,IAAI,GAAG1E,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,CAAb;AACA8C,MAAAA,IAAI,CAACF,MAAL,GAAc,CAACE,IAAI,CAACF,MAApB;AACA,YAAMG,IAAI,GAAG3E,SAAS,CAACrB,IAAV,CAAeiD,QAAf,CAAwB,CAAxB,CAAb;AACA+C,MAAAA,IAAI,CAACH,MAAL,GAAc,CAACG,IAAI,CAACH,MAApB;AACAxE,MAAAA,SAAS,CAACoE,MAAV;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAdF,eA+BE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,kBAAW,MAAvB;AAA8B,IAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CA/BF,CADF,CAVF,EAkDGrD,QAAQ,iBACP,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnDJ,CAHF,eA4DE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5DF,CADF;AAgED,CArQD;;AAuQA,eAAe9B,SAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Card, Button, IconButton } from '@material-ui/core';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Chart from 'chart.js';\nimport CoinCard from './CoinCard';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    minWidth: 300,\n    maxWidth: 1000,\n    backgroundColor: theme.palette.secondary.main,\n    padding: '1rem',\n    boxShadow: '0rem 0rem 1rem black',\n  },\n  gridContainer: {\n    paddingTop: '20px',\n  },\n}));\n\nconst jitter = (data) => {\n  const numericData = parseFloat(data);\n  const jitterAmount = Math.random() * (1.01 - 0.99) + 0.99;\n\n  return numericData * jitterAmount;\n};\n\nconst CoinChart = (props) => {\n  const {\n    firstPrice,\n    firstTimestamp,\n    firstArithmeticMean,\n    firstGeometricMean,\n    firstHarmonicMean,\n  } = props.location.state;\n  const { symbol, id } = props.match.params;\n\n  const classes = useStyles();\n\n  const chartRef = useRef(null);\n  const [coinChart, setcoinChart] = useState({});\n  const [coinPrice, setCoinPrice] = useState({\n    price: 0,\n    priceChange: 0,\n    totalSupply: 0,\n    marketCap: 0,\n    totalVolume: 0,\n    timestamp: '',\n  });\n  const [coinAggregate, setCoinAggregate] = useState({\n    arithmeticMean: 0,\n    geometricMean: 0,\n    harmonicMean: 0,\n  });\n  const [coinData, setCoinData] = useState(null);\n\n  const formatTime = (timestamp) => timestamp.slice(11, 19);\n\n  useEffect(() => {\n    const getCoin = async () => {\n      const data = await axios.get(\n        `https://api.coinranking.com/v1/public/coin/${id}`\n      );\n\n      setCoinData(data.data.data.coin);\n    };\n\n    getCoin();\n\n    const ctx = chartRef.current.getContext('2d');\n\n    const chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: [formatTime(firstTimestamp)],\n        datasets: [\n          {\n            label: 'Price',\n            data: [jitter(firstPrice)],\n            borderColor: '#3e95cd',\n            fill: false,\n          },\n          {\n            label: 'Arithmetic Mean',\n            data: [jitter(firstArithmeticMean)],\n            borderColor: '#8e5ea2',\n            fill: false,\n          },\n          {\n            label: 'Geometric Mean',\n            data: [jitter(firstGeometricMean)],\n            borderColor: '#3cba9f',\n            fill: false,\n          },\n          {\n            label: 'Harmonic Mean',\n            data: [jitter(firstHarmonicMean)],\n            borderColor: '#e8c3b9',\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Real-Time Dashboard',\n          fontFamily: 'Raleway',\n          fontSize: 45,\n          fontStyle: 'normal',\n          fontColor: '#f2a365',\n        },\n        tooltips: {\n          titleFontFamily: 'Roboto',\n          bodyFontFamily: 'Roboto',\n          displayColors: true,\n        },\n        legend: {\n          labels: {\n            fontColor: 'white',\n            fontFamily: 'Roboto',\n            fontSize: 14,\n          },\n        },\n        layout: {\n          padding: {\n            left: 25,\n            right: 25,\n            top: 0,\n            bottom: 25,\n          },\n        },\n        scales: {\n          yAxes: [\n            {\n              gridLines: {\n                display: true,\n                color: '#30475e',\n              },\n              ticks: {\n                fontColor: '#f2a365',\n                fontFamily: 'Roboto',\n                fontSize: 12,\n              },\n            },\n          ],\n          xAxes: [\n            {\n              gridLines: {\n                display: true,\n                color: '#30475e',\n              },\n              ticks: {\n                fontColor: '#f2a365',\n                fontFamily: 'Roboto',\n                fontSize: 12,\n              },\n            },\n          ],\n        },\n      },\n    });\n\n    setcoinChart(chart);\n  }, [\n    firstPrice,\n    firstArithmeticMean,\n    firstGeometricMean,\n    firstHarmonicMean,\n    firstTimestamp,\n    id,\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const getPrice = async () => {\n        const { data } = await axios.get(\n          `http://localhost:5000/latestPrice/${symbol}`\n        );\n\n        setCoinPrice({\n          price: data.price,\n          priceChange: data.percent_change_24hr,\n          totalSupply: data.total_supply,\n          marketCap: data.market_cap,\n          totalVolume: data.volume,\n          timestamp: data.timestamp,\n        });\n      };\n\n      const getAggregate = async () => {\n        const { data } = await axios.get(\n          `http://localhost:5000/latestAggregate/${symbol}`\n        );\n\n        setCoinAggregate({\n          arithmeticMean: data.arithmetic_mean,\n          geometricMean: data.geometric_mean,\n          harmonicMean: data.harmonic_mean,\n        });\n      };\n\n      getAggregate();\n      getPrice();\n\n      if (coinPrice.price !== 0) {\n        coinChart.data.labels.push(formatTime(coinPrice.timestamp));\n        coinChart.data.datasets[0].data.push(jitter(coinPrice.price));\n        coinChart.data.datasets[1].data.push(\n          jitter(coinAggregate.arithmeticMean)\n        );\n        coinChart.data.datasets[2].data.push(\n          jitter(coinAggregate.geometricMean)\n        );\n        coinChart.data.datasets[3].data.push(\n          jitter(coinAggregate.harmonicMean)\n        );\n\n        coinChart.update();\n      }\n    }, 10000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <Grid container>\n      <Grid item sm={1} />\n\n      <Grid\n        container\n        item\n        xs={12}\n        sm={10}\n        spacing={4}\n        className={classes.gridContainer}\n        justify=\"center\"\n        align=\"center\"\n      >\n        <Grid item xs={12} sm={10}>\n          <Card className={classes.card}>\n            <canvas id=\"coinChart\" ref={chartRef} />\n            <Button\n              style={{ margin: '5px' }}\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                const prices = coinChart.data.datasets[0];\n                prices.hidden = !prices.hidden;\n                coinChart.update();\n              }}\n            >\n              Toggle Price\n            </Button>\n            <Button\n              style={{ margin: '5px' }}\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                const amDS = coinChart.data.datasets[1];\n                amDS.hidden = !amDS.hidden;\n                const gmDS = coinChart.data.datasets[2];\n                gmDS.hidden = !gmDS.hidden;\n                const hmDS = coinChart.data.datasets[3];\n                hmDS.hidden = !hmDS.hidden;\n                coinChart.update();\n              }}\n            >\n              Toggle Aggregates\n            </Button>\n\n            <Link to=\"/\">\n              <IconButton aria-label=\"home\" color=\"primary\">\n                <AppsIcon />\n              </IconButton>\n            </Link>\n          </Card>\n        </Grid>\n\n        {coinData && (\n          <Grid item xs={12}>\n            <CoinCard coinData={coinData} />\n          </Grid>\n        )}\n      </Grid>\n\n      <Grid item sm={1} />\n    </Grid>\n  );\n};\n\nexport default CoinChart;\n"]},"metadata":{},"sourceType":"module"}