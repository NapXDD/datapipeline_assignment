{"ast":null,"code":"var _jsxFileName = \"/home/nap/crypto-streaming/reactUI/src/components/CoinCard.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { Card, CardHeader, CardMedia, CardContent, CardActionArea, CardActions, Collapse, IconButton, Typography } from '@material-ui/core';\nimport LanguageIcon from '@material-ui/icons/Language'; // import RedditIcon from '@material-ui/icons/Reddit';\n// import GitHubIcon from '@material-ui/icons/GitHub';\n// import TwitterIcon from '@material-ui/icons/Twitter';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CardContentData from './CardContentData';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minWidth: 250,\n    maxWidth: 500,\n    backgroundColor: theme.palette.secondary.main,\n    padding: '1rem',\n    boxShadow: '0rem 0rem 1rem black'\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  cardContentDiv: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    justifyContent: 'space-between'\n  },\n  innerText: {\n    color: 'secondary'\n  }\n}));\n\nconst roundNumber = numString => parseFloat(numString).toFixed(5);\n\nconst CoinCard = ({\n  coinData: {\n    name,\n    id,\n    uuid,\n    color,\n    description,\n    iconUrl,\n    websiteUrl,\n    links,\n    symbol\n  },\n  maxWidth\n}) => {\n  const classes = useStyles();\n  const [coinPrice, setCoinPrice] = useState({\n    price: 0,\n    priceChange: 0,\n    //totalSupply: 0,\n    marketCap: 0,\n    //totalVolume: 0,\n    timestamp: ''\n  });\n  const [coinAggregate, setCoinAggregate] = useState({\n    arithmeticMean: 0,\n    geometricMean: 0,\n    harmonicMean: 0\n  });\n  const [expanded, setExpanded] = useState(false);\n  useEffect(() => {\n    const getPrice = async () => {\n      const {\n        data\n      } = await axios.get(`http://localhost:5000/latestPrice/${symbol}`);\n      setCoinPrice({\n        price: data.price,\n        priceChange: data.percent_change_24hr,\n        //totalSupply: data.total_supply,\n        marketCap: data.market_cap,\n        //totalVolume: data.volume,\n        timestamp: data.timestamp\n      });\n    };\n\n    const getAggregate = async () => {\n      const {\n        data\n      } = await axios.get(`http://localhost:5000/latestAggregate/${symbol}`);\n      setCoinAggregate({\n        arithmeticMean: data.arithmetic_mean,\n        geometricMean: data.geometric_mean,\n        harmonicMean: data.harmonic_mean\n      });\n    };\n\n    getAggregate();\n    getPrice();\n  }, [symbol]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const getPrice = async () => {\n        const {\n          data\n        } = await axios.get(`http://localhost:5000/latestPrice/${symbol}`);\n        setCoinPrice({\n          price: data.price,\n          priceChange: data.percent_change_24hr,\n          //totalSupply: data.total_supply,\n          marketCap: data.market_cap,\n          //totalVolume: data.volume,\n          timestamp: data.timestamp\n        });\n      };\n\n      const getAggregate = async () => {\n        const {\n          data\n        } = await axios.get(`http://localhost:5000/latestAggregate/${symbol}`);\n        setCoinAggregate({\n          arithmeticMean: data.arithmetic_mean,\n          geometricMean: data.geometric_mean,\n          harmonicMean: data.harmonic_mean\n        });\n      };\n\n      getAggregate();\n      getPrice();\n    }, 60000);\n    return () => clearInterval(interval);\n  });\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  }; //const findLink = (linkType) => links.find((link) => link.type === linkType);\n\n\n  const addColorToHtml = html => {\n    if (!html) return html;\n\n    if (!color) {\n      color = '#f2a365';\n    }\n\n    return html.replaceAll('<h1>', `<h1 style=\"color:${color};font-family:'Raleway'\">`).replaceAll('<h2>', `<h2 style=\"color:${color};font-family:'Raleway'\">`).replaceAll('<h3>', `<h3 style=\"color:${color};font-family:'Raleway'\">`);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/${symbol}/${id}`,\n      state: {\n        firstPrice: coinPrice.price,\n        firstTimestamp: coinPrice.timestamp,\n        firstArithmeticMean: coinAggregate.arithmeticMean,\n        firstGeometricMean: coinAggregate.geometricMean,\n        firstHarmonicMean: coinAggregate.harmonicMean\n      }\n    },\n    style: {\n      textDecoration: 'none',\n      color: 'inherit'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardActionArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: name,\n    titleTypographyProps: {\n      variant: 'h4'\n    },\n    subheader: `Latest Price: ${roundNumber(coinPrice.price)}$`,\n    subheaderTypographyProps: {\n      variant: 'body1',\n      color: 'primary'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardMedia, {\n    className: classes.media,\n    image: iconUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardContentData, {\n    leftText: 'Latest Arithmetic Mean Price:',\n    rightText: `${roundNumber(coinAggregate.arithmeticMean)}$`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContentData, {\n    leftText: 'Latest Geometric Mean Price:',\n    rightText: `${roundNumber(coinAggregate.geometricMean)}$`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContentData, {\n    leftText: 'Latest Harmonic Mean Price:',\n    rightText: `${roundNumber(coinAggregate.harmonicMean)}$`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContentData, {\n    leftText: `24 Hour Price Change:`,\n    rightText: `${coinPrice.priceChange}%`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContentData, {\n    leftText: `Market Cap:`,\n    rightText: `${coinPrice.marketCap}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(CardActions, {\n    disableSpacing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, websiteUrl && /*#__PURE__*/React.createElement(\"a\", {\n    href: websiteUrl,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"coin homepage\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LanguageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(IconButton, {\n    className: clsx(classes.expand, {\n      [classes.expandOpen]: expanded\n    }),\n    onClick: handleExpandClick,\n    \"aria-expanded\": expanded,\n    \"aria-label\": \"show more\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Collapse, {\n    in: expanded,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: classes.innerText,\n    dangerouslySetInnerHTML: {\n      __html: addColorToHtml(description)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default CoinCard;","map":{"version":3,"sources":["/home/nap/crypto-streaming/reactUI/src/components/CoinCard.js"],"names":["React","useState","useEffect","makeStyles","clsx","Card","CardHeader","CardMedia","CardContent","CardActionArea","CardActions","Collapse","IconButton","Typography","LanguageIcon","ExpandMoreIcon","CardContentData","Link","axios","useStyles","theme","root","minWidth","maxWidth","backgroundColor","palette","secondary","main","padding","boxShadow","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","cardContentDiv","display","flexDirection","flexWrap","justifyContent","innerText","color","roundNumber","numString","parseFloat","toFixed","CoinCard","coinData","name","id","uuid","description","iconUrl","websiteUrl","links","symbol","classes","coinPrice","setCoinPrice","price","priceChange","marketCap","timestamp","coinAggregate","setCoinAggregate","arithmeticMean","geometricMean","harmonicMean","expanded","setExpanded","getPrice","data","get","percent_change_24hr","market_cap","getAggregate","arithmetic_mean","geometric_mean","harmonic_mean","interval","setInterval","clearInterval","handleExpandClick","addColorToHtml","html","replaceAll","pathname","state","firstPrice","firstTimestamp","firstArithmeticMean","firstGeometricMean","firstHarmonicMean","textDecoration","variant","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  CardActionArea,\n  CardActions,\n  Collapse,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport LanguageIcon from '@material-ui/icons/Language';\n// import RedditIcon from '@material-ui/icons/Reddit';\n// import GitHubIcon from '@material-ui/icons/GitHub';\n// import TwitterIcon from '@material-ui/icons/Twitter';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CardContentData from './CardContentData';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 250,\n    maxWidth: 500,\n    backgroundColor: theme.palette.secondary.main,\n    padding: '1rem',\n    boxShadow: '0rem 0rem 1rem black',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  cardContentDiv: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    justifyContent: 'space-between',\n  },\n  innerText: {\n    color: 'secondary',\n  },\n}));\n\nconst roundNumber = (numString) => parseFloat(numString).toFixed(5);\n\nconst CoinCard = ({\n  coinData: {\n    name,\n    id,\n    uuid,\n    color,\n    description,\n    iconUrl,\n    websiteUrl,\n    links,\n    symbol,\n  },\n  maxWidth,\n}) => {\n  const classes = useStyles();\n  const [coinPrice, setCoinPrice] = useState({\n    price: 0,\n    priceChange: 0,\n    //totalSupply: 0,\n    marketCap: 0,\n    //totalVolume: 0,\n    timestamp: '',\n  });\n  const [coinAggregate, setCoinAggregate] = useState({\n    arithmeticMean: 0,\n    geometricMean: 0,\n    harmonicMean: 0,\n  });\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    const getPrice = async () => {\n      const { data } = await axios.get(\n        `http://localhost:5000/latestPrice/${symbol}`\n      );\n\n      setCoinPrice({\n        price: data.price,\n        priceChange: data.percent_change_24hr,\n        //totalSupply: data.total_supply,\n        marketCap: data.market_cap,\n        //totalVolume: data.volume,\n        timestamp: data.timestamp,\n      });\n    };\n\n    const getAggregate = async () => {\n      const { data } = await axios.get(\n        `http://localhost:5000/latestAggregate/${symbol}`\n      );\n\n      setCoinAggregate({\n        arithmeticMean: data.arithmetic_mean,\n        geometricMean: data.geometric_mean,\n        harmonicMean: data.harmonic_mean,\n      });\n    };\n\n    getAggregate();\n    getPrice();\n  }, [symbol]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const getPrice = async () => {\n        const { data } = await axios.get(\n          `http://localhost:5000/latestPrice/${symbol}`\n        );\n\n        setCoinPrice({\n          price: data.price,\n          priceChange: data.percent_change_24hr,\n          //totalSupply: data.total_supply,\n          marketCap: data.market_cap,\n          //totalVolume: data.volume,\n          timestamp: data.timestamp,\n        });\n      };\n\n      const getAggregate = async () => {\n        const { data } = await axios.get(\n          `http://localhost:5000/latestAggregate/${symbol}`\n        );\n\n        setCoinAggregate({\n          arithmeticMean: data.arithmetic_mean,\n          geometricMean: data.geometric_mean,\n          harmonicMean: data.harmonic_mean,\n        });\n      };\n\n      getAggregate();\n      getPrice();\n    }, 60000);\n\n    return () => clearInterval(interval);\n  });\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  //const findLink = (linkType) => links.find((link) => link.type === linkType);\n\n  const addColorToHtml = (html) => {\n    if (!html) return html;\n\n    if (!color) {\n      color = '#f2a365';\n    }\n\n    return html\n      .replaceAll('<h1>', `<h1 style=\"color:${color};font-family:'Raleway'\">`)\n      .replaceAll('<h2>', `<h2 style=\"color:${color};font-family:'Raleway'\">`)\n      .replaceAll('<h3>', `<h3 style=\"color:${color};font-family:'Raleway'\">`);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <Link\n        to={{\n          pathname: `/${symbol}/${id}`,\n          state: {\n            firstPrice: coinPrice.price,\n            firstTimestamp: coinPrice.timestamp,\n            firstArithmeticMean: coinAggregate.arithmeticMean,\n            firstGeometricMean: coinAggregate.geometricMean,\n            firstHarmonicMean: coinAggregate.harmonicMean,\n          },\n        }}\n        style={{ textDecoration: 'none', color: 'inherit' }}\n      >\n        <CardActionArea>\n          <CardHeader\n            title={name}\n            titleTypographyProps={{ variant: 'h4' }}\n            subheader={`Latest Price: ${roundNumber(coinPrice.price)}$`}\n            subheaderTypographyProps={{ variant: 'body1', color: 'primary' }}\n          />\n          <CardMedia className={classes.media} image={iconUrl} />\n          <CardContent>\n            <CardContentData\n              leftText={'Latest Arithmetic Mean Price:'}\n              rightText={`${roundNumber(coinAggregate.arithmeticMean)}$`}\n            />\n            <CardContentData\n              leftText={'Latest Geometric Mean Price:'}\n              rightText={`${roundNumber(coinAggregate.geometricMean)}$`}\n            />\n            <CardContentData\n              leftText={'Latest Harmonic Mean Price:'}\n              rightText={`${roundNumber(coinAggregate.harmonicMean)}$`}\n            />\n            <CardContentData\n              leftText={`24 Hour Price Change:`}\n              rightText={`${coinPrice.priceChange}%`}\n            />\n            {/* <CardContentData\n              leftText={`Total Supply:`}\n              rightText={`${coinPrice.totalSupply}`}\n            /> */}\n            <CardContentData\n              leftText={`Market Cap:`}\n              rightText={`${coinPrice.marketCap}`}\n            />\n            {/* <CardContentData\n              leftText={`Total Volume:`}\n              rightText={`${coinPrice.totalVolume}`}\n            /> */}\n          </CardContent>\n        </CardActionArea>\n      </Link>\n      <CardActions disableSpacing>\n        {websiteUrl && (\n          <a href={websiteUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            <IconButton aria-label=\"coin homepage\" color=\"primary\">\n              <LanguageIcon />\n            </IconButton>\n          </a>\n        )}\n        {/* {findLink('reddit') && (\n          <a\n            href={findLink('reddit').url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <IconButton aria-label=\"reddit\" color=\"primary\">\n              <RedditIcon />\n            </IconButton>\n          </a>\n        )}\n        {findLink('github') && (\n          <a\n            href={findLink('github').url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <IconButton aria-label=\"github\" color=\"primary\">\n              <GitHubIcon />\n            </IconButton>\n          </a>\n        )}\n        {findLink('twitter') && (\n          <a\n            href={findLink('twitter').url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <IconButton aria-label=\"twitter\" color=\"primary\">\n              <TwitterIcon />\n            </IconButton>\n          </a>\n        )} */}\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n          color=\"primary\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography>\n            <div\n              class={classes.innerText}\n              dangerouslySetInnerHTML={{\n                __html: addColorToHtml(description),\n              }}\n            />\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default CoinCard;\n"]},"metadata":{},"sourceType":"module"}